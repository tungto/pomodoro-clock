{"version":3,"sources":["components/ControlBoard/ControlBoard.js","components/DisplayBoard/DisplayBoard.js","container/App.js","reportWebVitals.js","index.js"],"names":["controlBoard","props","id","className","type","toUpperCase","onClick","handleClick","length","DisplayBoard","interval","time","isRunning","pause","start","reset","src","App","adjustTimeLength","e","target","split","direction","intervals","state","setState","formatTime","value","getSeconds","pausedTime","parseInt","getMinutes","isSession","session","break","countDown","minutes","seconds","setInterval","controlAudio","clearInterval","action","audio","document","getElementById","currentTime","interValTypes","Object","keys","controlBoards","this","map","ControlBoard","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d32b6b08.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst controlBoard = (props) => {\r\n  return (\r\n    <div id={props.id} className='control-board'>\r\n      <h2 id={`${props.type}-label`}>{props.type.toUpperCase()}</h2>\r\n      <div className='length-control'>\r\n        <button id={`${props.type}-decrement`} onClick={props.handleClick}>\r\n          &#x2212;\r\n        </button>\r\n        <p id={`${props.type}-length`}>{props.length}</p>\r\n        <button id={`${props.type}-increment`} onClick={props.handleClick}>\r\n          &#x2b;\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default controlBoard;\r\n","import React from 'react';\r\n\r\nfunction DisplayBoard(props) {\r\n  return (\r\n    <div id='display-board'>\r\n      <h1 id='timer-label'>{props.interval.toUpperCase()}</h1>\r\n      <p>Time Left</p>\r\n      <h2 id='time-left'>{props.time}</h2>\r\n      <button\r\n        id='start_stop'\r\n        onClick={props.isRunning ? props.pause : props.start}\r\n      >\r\n        &#x22B5;\r\n      </button>\r\n      <button id='reset' onClick={props.reset}>\r\n        &#x21ba;\r\n      </button>\r\n\r\n      <audio\r\n        id='beep'\r\n        type='audio/mpeg'\r\n        src='https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayBoard;\r\n","import './App.css';\nimport React, { Component } from 'react';\nimport ControlBoard from '../components/ControlBoard/ControlBoard';\nimport DisplayBoard from '../components/DisplayBoard/DisplayBoard';\nimport ReactFCCtest from 'react-fcctest';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      intervals: {\n        break: 5,\n        session: 25,\n      },\n      isSession: true,\n      isRunning: false,\n      pausedTime: null,\n      time: '25:00',\n    };\n    this.interValTypes = Object.keys(this.state.intervals);\n  }\n\n  adjustTimeLength = (e) => {\n    const adjustBtnID = e.target.id;\n    const [type, direction] = adjustBtnID.split('-');\n    const intervals = { ...this.state.intervals };\n\n    direction === 'increment' ? intervals[type]++ : intervals[type]--;\n\n    if (intervals[type] >= 1 && intervals[type] <= 60) {\n      this.setState({ intervals });\n      if (type === 'session') {\n        this.setState({ time: `${this.formatTime(intervals[type])}:00` });\n      }\n    }\n  };\n\n  formatTime = (value) => {\n    return value < 10 ? `0${value}` : `${value}`;\n  };\n\n  getSeconds = (e) => {\n    const { pausedTime } = this.state;\n    return pausedTime ? parseInt(pausedTime[1]) : 0;\n  };\n\n  getMinutes = () => {\n    const { pausedTime, isSession, intervals } = this.state;\n    return pausedTime\n      ? parseInt(pausedTime[0])\n      : isSession\n      ? intervals.session\n      : intervals.break;\n  };\n\n  countDown = () => {\n    this.setState({ isRunning: true });\n    let minutes = this.getMinutes();\n    let seconds = this.getSeconds();\n\n    this.interval = setInterval(() => {\n      seconds--;\n      if (seconds < 0) {\n        if (minutes > 0) {\n          minutes--;\n          seconds = 59;\n        } else {\n          this.setState({ isSession: !this.state.isSession });\n          this.controlAudio('play');\n\n          // get munites and second of new interval Type\n          minutes = this.getMinutes();\n          seconds = this.getSeconds();\n        }\n      }\n\n      this.setState({\n        time: `${this.formatTime(minutes)}:${this.formatTime(seconds)}`,\n      });\n    }, 1000);\n  };\n\n  pause = () => {\n    clearInterval(this.interval);\n    this.setState({ isRunning: false, pausedTime: this.state.time.split(':') });\n  };\n\n  controlAudio = (action) => {\n    const audio = document.getElementById('beep');\n    if (action === 'rewind') {\n      audio.currentTime = 0;\n    } else {\n      // awesome!!!!\n      audio[action]();\n    }\n  };\n\n  reset = () => {\n    clearInterval(this.interval);\n    this.controlAudio('pause');\n    this.controlAudio('rewind');\n    this.setState({\n      intervals: {\n        break: 5,\n        session: 25,\n      },\n      isSession: true,\n      isRunning: false,\n      pausedTime: null,\n      time: '25:00',\n    });\n  };\n\n  render() {\n    const controlBoards = this.interValTypes.map((type) => {\n      return (\n        <ControlBoard\n          type={type}\n          handleClick={this.adjustTimeLength}\n          key={type}\n          length={this.state.intervals[type]}\n        />\n      );\n    });\n\n    return (\n      <div className='App'>\n        <ReactFCCtest />\n        <h1>Pomodoro Clock</h1>\n        <div className='ControlBoards'>{controlBoards}</div>\n\n        <DisplayBoard\n          interval={\n            this.state.isSession ? this.interValTypes[0] : this.interValTypes[1]\n          }\n          reset={this.reset}\n          time={this.state.time}\n          start={this.countDown}\n          isRunning={this.state.isRunning}\n          pause={this.pause}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}